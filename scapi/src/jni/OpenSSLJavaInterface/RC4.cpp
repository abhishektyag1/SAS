/**
* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
* 
* Copyright (c) 2012 - SCAPI (http://crypto.biu.ac.il/scapi)
* This file is part of the SCAPI project.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
* and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* 
* We request that any publication and/or code referring to and/or based on SCAPI contain an appropriate citation to SCAPI, including a reference to
* http://crypto.biu.ac.il/SCAPI.
* 
* SCAPI uses Crypto++, Miracl, NTL and Bouncy Castle. Please see these projects for any further licensing issues.
* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
* 
*/

#include "StdAfx.h"
#include <jni.h>
#include "RC4.h"
#include <openssl/rc4.h>
#include <iostream>
#include <cstdlib>

using namespace std;

/* 
 * function createRC4		: Create a native RC4 function.
 * return					: Pointer to the created RC4.
 */
JNIEXPORT jlong JNICALL Java_edu_biu_scapi_primitives_prg_openSSL_OpenSSLRC4_createRC4
  (JNIEnv *, jobject){
	  RC4_KEY *key = new RC4_KEY();

	  return (long) key;
}

/* 
 * function initRC4		: Initialize the given RC4 object with the given key.
 * param rc4			: Pointer to the native RC4 object.
 * param key			: The key that should be set.
 */
JNIEXPORT void JNICALL Java_edu_biu_scapi_primitives_prg_openSSL_OpenSSLRC4_initRC4
  (JNIEnv *env, jobject, jlong rc4, jbyteArray key){
	  //Convert the given data into c++ notation.
	  jbyte* keyBytes  = (jbyte*) env->GetByteArrayElements(key, 0);

	  //Set the key to the native object.
	  RC4_set_key((RC4_KEY*)rc4, env->GetArrayLength(key), (const unsigned char*) keyBytes);
	  
	  //Release the allocated memory.
	  env->ReleaseByteArrayElements(key, keyBytes, 0);
}

/* 
 * function generateBytes		: Computes the PRG to generate bytes.
 * param rc4					: Pointer to the native RC4 object.
 * param outLen					: The number of bytes to generate.
 * param out					: The output array that should be filled with pseudo random bytes.
 * param outOffset				: The offset within the output array to fill the bytes from.
 */
JNIEXPORT void JNICALL Java_edu_biu_scapi_primitives_prg_openSSL_OpenSSLRC4_generateBytes
  (JNIEnv *env, jobject, jlong rc4, jint outLen, jbyteArray out, jint outOffset){
	  
	  //Create an input array full with zeros. (It will be xored with the pseudo random bytes in order to get the generated bytes).
	  unsigned char* in = (unsigned char*) calloc (outLen, sizeof(char));
	  
	  //Prepare the output array.
	  unsigned char* output = new unsigned char[outLen];

	  //Generate the pseudo random bytes.
	  RC4((RC4_KEY*) rc4, outLen, in, output);

	  //Copy the output bytes to the given output array.
	  env->SetByteArrayRegion(out, outOffset, outLen, (jbyte*)output);

	  //Release the allocated memory.
	  free(in);
	  delete output;
}

/* 
 * function deleteNative		: Deletes the native object.
 * param rc4					: Pointer to the native RC4 object.
 */
JNIEXPORT void JNICALL Java_edu_biu_scapi_primitives_prg_openSSL_OpenSSLRC4_deleteNative
  (JNIEnv *, jobject, jlong rc4){
	  delete (RC4_KEY*) rc4;
}
