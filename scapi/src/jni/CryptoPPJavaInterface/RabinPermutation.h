/**
* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
* 
* Copyright (c) 2012 - SCAPI (http://crypto.biu.ac.il/scapi)
* This file is part of the SCAPI project.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
* and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* 
* We request that any publication and/or code referring to and/or based on SCAPI contain an appropriate citation to SCAPI, including a reference to
* http://crypto.biu.ac.il/SCAPI.
* 
* SCAPI uses Crypto++, Miracl, NTL and Bouncy Castle. Please see these projects for any further licensing issues.
* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
* 
*/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation */

#ifndef _Included_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
#define _Included_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    initRabinPublicPrivate
 * Signature: ([B[B[B[B[B[B)J
 */
JNIEXPORT jlong JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_initRabinPublicPrivate
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    initRabinPublic
 * Signature: ([B[B[B)J
 */
JNIEXPORT jlong JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_initRabinPublic
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    initRabinRandomly
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_initRabinRandomly
  (JNIEnv *, jobject, jint);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    loadRabinName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_loadRabinName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    getRabinModulus
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_getRabinModulus
  (JNIEnv *, jobject, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    getPrime1
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_getPrime1
  (JNIEnv *, jobject, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    getPrime2
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_getPrime2
  (JNIEnv *, jobject, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    getinversePModQ
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_getinversePModQ
  (JNIEnv *, jobject, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    getQuadraticResidueModPrime1
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_getQuadraticResidueModPrime1
  (JNIEnv *, jobject, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    getQuadraticResidueModPrime2
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_getQuadraticResidueModPrime2
  (JNIEnv *, jobject, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    checkRabinValidity
 * Signature: (JJ)Z
 */
JNIEXPORT jboolean JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_checkRabinValidity
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    computeRabin
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_computeRabin
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    invertRabin
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_invertRabin
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation
 * Method:    deleteRabin
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_edu_biu_scapi_primitives_trapdoorPermutation_cryptopp_CryptoPpRabinPermutation_deleteRabin
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
